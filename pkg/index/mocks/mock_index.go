// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/index/index.go

// Package mock_index is a generated GoMock package.
package mock_index

import (
	reflect "reflect"

	evaluators "github.com/kuadrant/authorino/pkg/evaluators"
	gomock "go.uber.org/mock/gomock"
)

// MockIndex is a mock of Index interface.
type MockIndex struct {
	ctrl     *gomock.Controller
	recorder *MockIndexMockRecorder
}

// MockIndexMockRecorder is the mock recorder for MockIndex.
type MockIndexMockRecorder struct {
	mock *MockIndex
}

// NewMockIndex creates a new mock instance.
func NewMockIndex(ctrl *gomock.Controller) *MockIndex {
	mock := &MockIndex{ctrl: ctrl}
	mock.recorder = &MockIndexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndex) EXPECT() *MockIndexMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIndex) Delete(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", id)
}

// Delete indicates an expected call of Delete.
func (mr *MockIndexMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIndex)(nil).Delete), id)
}

// DeleteKey mocks base method.
func (m *MockIndex) DeleteKey(id, key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteKey", id, key)
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockIndexMockRecorder) DeleteKey(id, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockIndex)(nil).DeleteKey), id, key)
}

// Empty mocks base method.
func (m *MockIndex) Empty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty.
func (mr *MockIndexMockRecorder) Empty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockIndex)(nil).Empty))
}

// FindId mocks base method.
func (m *MockIndex) FindId(key string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindId", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindId indicates an expected call of FindId.
func (mr *MockIndexMockRecorder) FindId(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindId", reflect.TypeOf((*MockIndex)(nil).FindId), key)
}

// FindKeys mocks base method.
func (m *MockIndex) FindKeys(id string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindKeys", id)
	ret0, _ := ret[0].([]string)
	return ret0
}

// FindKeys indicates an expected call of FindKeys.
func (mr *MockIndexMockRecorder) FindKeys(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindKeys", reflect.TypeOf((*MockIndex)(nil).FindKeys), id)
}

// Get mocks base method.
func (m *MockIndex) Get(key string) *evaluators.AuthConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(*evaluators.AuthConfig)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockIndexMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIndex)(nil).Get), key)
}

// List mocks base method.
func (m *MockIndex) List() []*evaluators.AuthConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*evaluators.AuthConfig)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockIndexMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIndex)(nil).List))
}

// Set mocks base method.
func (m *MockIndex) Set(id, key string, config evaluators.AuthConfig, override bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", id, key, config, override)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIndexMockRecorder) Set(id, key, config, override interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIndex)(nil).Set), id, key, config, override)
}
