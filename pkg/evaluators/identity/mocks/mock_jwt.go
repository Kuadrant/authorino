// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/evaluators/identity/jwt.go
//
// Generated by this command:
//
//	mockgen -source=pkg/evaluators/identity/jwt.go -destination=pkg/evaluators/identity/mocks/mock_jwt.go
//

// Package mock_identity is a generated GoMock package.
package mock_identity

import (
	context "context"
	reflect "reflect"

	oidc "github.com/coreos/go-oidc/v3/oidc"
	gomock "go.uber.org/mock/gomock"
)

// MockJWTVerifier is a mock of JWTVerifier interface.
type MockJWTVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockJWTVerifierMockRecorder
	isgomock struct{}
}

// MockJWTVerifierMockRecorder is the mock recorder for MockJWTVerifier.
type MockJWTVerifierMockRecorder struct {
	mock *MockJWTVerifier
}

// NewMockJWTVerifier creates a new mock instance.
func NewMockJWTVerifier(ctrl *gomock.Controller) *MockJWTVerifier {
	mock := &MockJWTVerifier{ctrl: ctrl}
	mock.recorder = &MockJWTVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTVerifier) EXPECT() *MockJWTVerifierMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockJWTVerifier) Verify(ctx context.Context, rawIDToken string) (*oidc.IDToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, rawIDToken)
	ret0, _ := ret[0].(*oidc.IDToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockJWTVerifierMockRecorder) Verify(ctx, rawIDToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockJWTVerifier)(nil).Verify), ctx, rawIDToken)
}
